<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Octopress on Kiyeon&#39;s Blog</title>
    <link>http://blog2.kiyeon.net/categories/octopress/index.xml</link>
    <description>Recent content in Octopress on Kiyeon&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog2.kiyeon.net/categories/octopress/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Octopress &amp;amp; Start</title>
      <link>http://blog2.kiyeon.net/2015/05/26/octopress-and-start/</link>
      <pubDate>Tue, 26 May 2015 20:39:26 +0000</pubDate>
      
      <guid>http://blog2.kiyeon.net/2015/05/26/octopress-and-start/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;세상에는 매우 다양한 CMS&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cms&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cms&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;가 있다.&lt;br /&gt;
인터넷이 국내에 막 대중에게 보급되기 시작한 1999년부터 지금(2015년)까지 블로깅을 하기위해 다양한 시도를 해봤다. 정적페이지에 직접 C로 작성한 CGI를 이용해 방명록과 게시판을 달아보기도 했고&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cgi&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cgi&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; PHP로 사용자인증을 적용한 게시판을 만들어 사용해보기도 했다.  당시엔 직접만들어 쓰거나 아니면 누군가 만들어 놓은 CMS를 이용하기도 했는데 그땐 그런 툴이 몇 안되었기 때문에 선택이 쉬웠다. 사용하는 언어도 C, PHP, JAVA, JSP정도였고 DB도 Oracle아니면 MySQL정도였다.  운동도 보는것보다는 직접하는걸 더 좋아하는데 이런 성향은 개발에서도 나타난다. 누군가 만든걸 가져다 쓰는것보다는 직접 만들어 쓰는걸 더 선호한다.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:preference&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:preference&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;

어쨋거나&amp;hellip; 컨텐츠보다는 프레임에 더 집착하다보니 유행과 관심사에 따라 뒤엎기를 반복하여 제대로 운영되는 블로그 하나 제대로 없다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt;는 웹서핑중 우연히 알게됐다.
Ruby로 만들어졌고 DB를 사용하지 않으며 Markdown을 사용하는 정적 블로깅 툴이다.
이런 특징때문에 &lt;a href=&#34;http://octopress.org/docs/deploying/&#34;&gt;호스팅을 굉장히 쉽게 할 수 있다.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;사실 이 글은 이제막 설치하여 처음 작성해보는 글로 앞으로 어떤 험난한 여정이 남아있는지 모른다. 하지만 잠간동안 써본 느낌은&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;설치가 간단하다.&lt;/li&gt;
&lt;li&gt;포스팅이 쉽다.&lt;/li&gt;
&lt;li&gt;글쓰기에 집중하기 좋다.&lt;/li&gt;
&lt;li&gt;느리고 답답한 웹에디터를 사용하지 않아도 된다.&lt;/li&gt;
&lt;li&gt;Git으로 관리되어 버전관리가 가능하며 안전하다.&lt;/li&gt;
&lt;li&gt;백업 및 이전이 쉽다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Markdown&#34;&gt;Markdown&lt;/a&gt;, Ruby, &lt;a href=&#34;http://en.wikipedia.org/wiki/Sass_(stylesheet_language)&#34;&gt;Sass&lt;/a&gt;, Git과 친해질 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이제 남은건 커스터마이즈!&lt;br /&gt;
즐겁게 사용해보자~&lt;/p&gt;

&lt;h2 id=&#34;tip&#34;&gt;Tip&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://asaf.github.io/blog/2013/07/08/blogging-with-octopress-add-comments/&#34;&gt;Blogging With Octopress: Add Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;zsh을 사용한다면 &lt;code&gt;alias rake=&#39;noglob rake&#39;&lt;/code&gt;를 사용해야 &lt;code&gt;zsh: no matches found&lt;/code&gt; 에러가 발생하지 않는다.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:tip1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:tip1&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;AWS에서 &lt;a href=&#34;http://octopress.org/docs/blogging/&#34;&gt;preview&lt;/a&gt; 사용을 위해 포트열기.

&lt;ol&gt;
&lt;li&gt;Security Groups에서 Inbound에 4000포트를 추가.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;netstat -nap | grep LISTEN&lt;/code&gt;에서 Local Address가 &lt;code&gt;127.0.0.1:4000&lt;/code&gt;으로 나온다면 &lt;code&gt;Rakefile&lt;/code&gt;에서 rackup에 호스트 옵션을 추가한다. &amp;ldquo;rackup &lt;code&gt;--host 0.0.0.0&lt;/code&gt; &amp;ndash;port #{server_port}&amp;rdquo;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:tip2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:tip2&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devcenter.heroku.com/articles/custom-domains#remove-a-domain&#34;&gt;Heroku 도메인 연결&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:heroku-domain&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:heroku-domain&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;

&lt;ul&gt;
&lt;li&gt;목록보기 : &lt;code&gt;heroku domains&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;전체목록 : &lt;code&gt;for app in `heroku apps`; do heroku domains --app $app; done&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;추가 : &lt;code&gt;heroku domains:add domain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;삭제 : &lt;code&gt;heroku domains:remove domain&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;yaml-front-matter&#34;&gt;YAML Front Matter&lt;/h2&gt;

&lt;p&gt;포스트에 &lt;a href=&#34;https://ko.wikipedia.org/wiki/YAML&#34;&gt;YAML&lt;/a&gt;형식의 머리말 블록이 사용되며 다음과 같이 사용된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
layout: post
title : Blogging Like a Hacker

# One category
categories: Sass
 
# Multiple categories example 1
categories: [CSS3, Sass, Media Queries]
 
# Multiple categories example 2
categories:
- CSS3
- Sass
- Media Queries
---
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;이 대쉬문자 사이에 사전-정의 변수 (설명은 아래를 참고하세요) 를 사용할 수 있고, 심지어는 자신만의 고유 변수를 정의할 수도 있습니다. 이 변수들은 해당 파일은 물론 해당 페이지 (또는 포스트) 에 연결된 레이아웃이나 include 파일에서 Liquid 태그를 사용하여 접근할 수 있습니다. at &lt;a href=&#34;http://jekyllrb-ko.github.io/docs/frontmatter/&#34;&gt;jekyll&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이와 같이 사전정의 변수에 따라서 화면의 레이아웃이나 스타일을 쉽게 변경할 수 있는데 정의된 변수들과 기능이 무엇인지에 대한 가이드가 미비한거 같다.(내가 못찾는 건가&amp;hellip;) 현재 사용중인 Yaml front matter를 정리해봤다.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Desc&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;layout&lt;/td&gt;
&lt;td&gt;post/page&lt;/td&gt;
&lt;td&gt;화면 레이아웃을 지정한다. 해당 레이아웃은 &lt;code&gt;source/_layouts&lt;/code&gt;폴더에 있어야 한다.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;title&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;문서제목으로 사용된다.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;date&lt;/td&gt;
&lt;td&gt;Date(2015-05-26 20:39:26 +0900)&lt;/td&gt;
&lt;td&gt;문서 작성일&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;comments&lt;/td&gt;
&lt;td&gt;true/false&lt;/td&gt;
&lt;td&gt;커멘트 출력여부&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;categories&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;카테고리를 지정하며 다수일경우 스페이스로 구분한다&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;tags&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;카테고리와 유사하게, 하나 이상의 태그를 포스트에 추가할 수 있다. 또한, YAML 리스트 또는 공백문자로 구분하여 여러 태그를 지정할 수 있다.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;permalink&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;생성된 블로그 포스트의 기본 URL을 사용하지 않고 다른 URL을 입력하면, 이것이 최종 URL로 사용된다.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;published&lt;/td&gt;
&lt;td&gt;true/false&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;로 설정하면 &lt;code&gt;rake generate&lt;/code&gt;나 &lt;code&gt;rake deploy&lt;/code&gt;시 배포되지 않는다. 로컬에서만 &lt;code&gt;rake preview&lt;/code&gt; 보인다.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sidebar&lt;/td&gt;
&lt;td&gt;collapse&lt;/td&gt;
&lt;td&gt;사이드바를 숨긴다.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;footer&lt;/td&gt;
&lt;td&gt;true/flase&lt;/td&gt;
&lt;td&gt;footer 출력여부&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sharing&lt;/td&gt;
&lt;td&gt;true/false&lt;/td&gt;
&lt;td&gt;소셜 공유 버튼 출력 여부&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;description&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;SEO 문서 정보 요약&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;keywords&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;SEO Keyword, 구분은 쉼표 ex) yaml, tip, how to&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;external-url&lt;/td&gt;
&lt;td&gt;url&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://octopress.org/docs/blogging/linklog/&#34;&gt;Linklog&lt;/a&gt;에 사용한다.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;useful-plugins-sites&#34;&gt;Useful Plugins &amp;amp; Sites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/optikfluffel/octopress-responsive-video-embed&#34;&gt;Responsive video embed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://chrissimpkins.github.io/octopus/&#34;&gt;octopus&lt;/a&gt; - the octopress commander&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mikebuss.com/2015/01/27/linklogs-with-jekyll/&#34;&gt;Linklogs with Jekyll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.davidruttka.com/blog/2014/04/08/fixing-the-external-url-linklog-feature-in-octopress/&#34;&gt;Fixing the External-url (Linklog) Feature in Octopress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll 영문문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svperstarz.github.io/jekyll-docs-ko/&#34;&gt;Jekyll 한글문서&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:cms&#34;&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/List_of_content_management_systems&#34;&gt;List of content management systems&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cms&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cgi&#34;&gt;당시에는 인터넷 전용선이 아닌 전화라인으로 통신을 했기에 속도가 느렸다. 이런 이유로 C로 작성한 &lt;a href=&#34;http://en.wikipedia.org/wiki/Common_Gateway_Interface&#34;&gt;CGI(Common Gateway Interface)&lt;/a&gt;가 하나의 대안이였다.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cgi&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:preference&#34;&gt;모든걸 다 만들어 쓰는건 아니지만 최소한 쓰더라도 어떻게 구현됐는지에 대한 호기심이 많다.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:preference&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:tip1&#34;&gt;&lt;a href=&#34;http://octopress.org/docs/blogging/&#34;&gt;Blogging Basics&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:tip1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:tip2&#34;&gt;이 문제로 &lt;code&gt;nmap localhost&lt;/code&gt;, &lt;code&gt;netstat -nap&lt;/code&gt;, &lt;code&gt;ufw&lt;/code&gt;을 사용하면서 방화벽설정을 몇시간했는데 결국 Local Address문제였다. &lt;a href=&#34;http://stackoverflow.com/a/20778887&#34;&gt;127.0.0.0과 0.0.0.0과의 차이&lt;/a&gt;, &lt;a href=&#34;http://stackoverflow.com/a/27678343&#34;&gt;The default host for Rails servers has changed in 4.2.&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:tip2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:heroku-domain&#34;&gt;도메인을 연결하려는데 &lt;code&gt;domain is currently in use by another app.&lt;/code&gt;라는 메세지와 함께 연결이 되지 않았다. 도메인 설정을 해보고 가이드를 아무리봐도 되지 않았는데 이유는 예전에 사용하던 &lt;a href=&#34;http://postach.io&#34;&gt;postach.io&lt;/a&gt; 서비스에 도메인이 연결되었던듯 하다.(postach.io도 heroku사용중인듯&amp;hellip;) 유료화되면서 더이상 제어를 할 수 없어 도메인 회수 방법을 고민중이다&amp;hellip; 15.06.16 - &lt;a href=&#34;http://nerdburn.com/&#34;&gt;Shawn Adrian&lt;/a&gt;의 도움으로 해결했다. 역시 헤로쿠를 사용했고 내 도메인을 삭제했다는 답장을 받은후 등록이 잘 됐다.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:heroku-domain&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1&#34;&gt;Blog와 Linklog의 좋은 예. &lt;a href=&#34;http://tom.preston-werner.com/&#34;&gt;Tom Preston-Werner&lt;/a&gt;, &lt;a href=&#34;http://daringfireball.net/linked/&#34;&gt;Daring fireball&amp;rsquo;s Linked List&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>