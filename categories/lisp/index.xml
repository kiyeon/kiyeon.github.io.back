<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lisp on Kiyeon&#39;s Blog</title>
    <link>http://kiyeon.github.io/categories/lisp/index.xml</link>
    <description>Recent content in Lisp on Kiyeon&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://kiyeon.github.io/categories/lisp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>LISP</title>
      <link>http://kiyeon.github.io/2015/11/28/lisp/</link>
      <pubDate>Sat, 28 Nov 2015 01:51:00 +0000</pubDate>
      
      <guid>http://kiyeon.github.io/2015/11/28/lisp/</guid>
      <description>

&lt;h2 id=&#34;lisp-https-ko-wikipedia-org-wiki-eb-a6-ac-ec-8a-a4-ed-94-84&#34;&gt;&lt;a href=&#34;https://ko.wikipedia.org/wiki/%EB%A6%AC%EC%8A%A4%ED%94%84&#34;&gt;LISP&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;표현 기능이 대단히 뛰어난 언어, 가장 복잡한 프로그래밍 아이디어를 명확하고 적절하게 표현할 수 있도록 설계.&lt;/li&gt;
&lt;li&gt;많은 대기업이 핵심적인 업무에 리스프를 사용.&lt;/li&gt;
&lt;li&gt;리스프는 작은 노력으로도 배울 수 있지만 컴퓨터 프로그래밍에 대해 깊은 통찰력을 갖게 한다.&lt;/li&gt;
&lt;li&gt;확장성 있는 라이브러리를 비롯한 수많은 언어 기능을 지원하며 컴파일러/인터프리터를 무척 쉽게 수정할 수 있다. 리스프의 주된 원리를 따르는 모든 언어는 리스프의 변종이라 하고 그래서 &lt;strong&gt;리스프는 변종이 많다.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;가장 많이 사용하는 리스프는 &lt;strong&gt;안시 커먼 리스프&lt;/strong&gt;와 &lt;strong&gt;스킴&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;안시 커먼 리스프

&lt;ul&gt;
&lt;li&gt;1981년 많은 리스프 변종에 대응하고자 리스프 단체에서 커먼 리스프라는 리스프 명세서를 발표.&lt;/li&gt;
&lt;li&gt;1986년 커먼 리스프가 좀 더 다듬어져 안시 커먼 리스프 규격으로 바뀌었다.&lt;/li&gt;
&lt;li&gt;리스프 사상 최고의 인기를 끌며 현재까지 최고의 점유율을 유지.&lt;/li&gt;
&lt;li&gt;주된 설계 목표는 &lt;strong&gt;다양한 개념을 아우르는 언어&lt;/strong&gt;를 만드는 것이며 이 말은 다양한 프로그래밍 방식을 지원을 뜻한다. 객체 지향 프로그래밍, 함수형 프로그래밍, 제네릭 프로그래밍, 특정 도메인 언어 프로그래밍 등 이 모두 커먼 리스프에서는 막힘없이 지원되고 있다. &lt;strong&gt;다중 프레임 언어&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;앞날이-기대되는-리스프&#34;&gt;앞날이 기대되는 리스프&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;하스켈

&lt;ul&gt;
&lt;li&gt;안시 커먼 리스프와 스킴, 둘 다 완벽히 만족하는 리스프가 없지만 대체 언어로 &lt;strong&gt;하스켈&lt;/strong&gt;이 있다.&lt;/li&gt;
&lt;li&gt;하스켈은 리스프 변종으로 분류되지 않지만 리스퍼 사이에 널리 퍼진 개념을 따른다.&lt;/li&gt;
&lt;li&gt;하스켈은 스킴보다도 더한 고도의 수학적 엄격함을 갖추고 있는데, 이 엄격함은 매우 깔금한 외형 이면에 강력한 기능을 감출 수 있게 한다. &lt;strong&gt;양의 탈을 쓴 늑대&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;클로저

&lt;ul&gt;
&lt;li&gt;자바로 작성&lt;/li&gt;
&lt;li&gt;검증된 수많은 자바 라이브러리를 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;멀티코어 프로그래밍에 유용하다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;아크

&lt;ul&gt;
&lt;li&gt;진정한 리스프&lt;/li&gt;
&lt;li&gt;개발 진도가 매우 느리다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;lisp-맛보기&#34;&gt;LISP 맛보기&lt;/h2&gt;

&lt;p&gt;내 숫자를 맞춰봐 게임.&lt;br /&gt;
마음속으로 1~100사이의 숫자를 정하고 컴퓨터에게 맞추게 하는 게임이다.&lt;/p&gt;


(defparameter *small* 1)
(defparameter *big* 100)
(defun guess-my-number()
    (ash (+ *small* *big*) -1))
(defun smaller ()
    (setf *big* (1- (guess-my-number)))
    (guess-my-number))
(defun bigger ()
    (setf *small* (1+ (guess-my-number)))
    (guess-my-number))
(defun start-over ()
    (defparameter *small* 1)
    (defparameter *big* 100)
    (guess-my-number))


&lt;h3 id=&#34;기본-수칙&#34;&gt;기본 수칙&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;리스프는 괄호로 명령어를 둘러싸야 한다. &lt;strong&gt;이 괄호 없이는 명령어가 실행되지 않는다.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;리스프는 코드를 읽을때, 공백과 줄넘김은 완전히 무시된다.&lt;/li&gt;
&lt;li&gt;그러므로 유연한 형태로 코드를 작성할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;전역변수&#34;&gt;전역변수&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;리스프에서 전역으로 선언된 변수를 &lt;strong&gt;최상위 정의(top-level definition)&lt;/strong&gt;라 부른다. &lt;code&gt;defparameter&lt;/code&gt;함수를 이용해 새로운 최상위 정의를 할 수 있다. (전역변수)&lt;/li&gt;
&lt;li&gt;전역변수 &lt;code&gt;*big*&lt;/code&gt;과 &lt;code&gt;*small*&lt;/code&gt;이름을 둘러싼 &lt;code&gt;*&lt;/code&gt;기호는(귀마개라는 애칭을 사용) 선택 사항이고 마음껏 써도 된다. 리스프는 &lt;code&gt;*&lt;/code&gt; 기호를 변수 이름의 일부분으로 인식하고 이를 무시한다. 리스퍼는 관습처럼 전역변수에 &lt;code&gt;*&lt;/code&gt;기호를 붙여서 지역변수와 구분하기 쉽게 한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defparameter&lt;/code&gt;는 전역변수에 값을 쓰면 이전에 저장된 모든 값을 덮어쓴다. 전역변수를 정의하는 다른 함수 &lt;code&gt;defvar&lt;/code&gt;는 이전 값을 덮어쓰지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;전역-함수&#34;&gt;전역 함수&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;커먼 리스프에서 함수는 &lt;code&gt;defun&lt;/code&gt; 명령으로 정의한다.&lt;/li&gt;
&lt;li&gt;리스프에서는 return이 필요 없으며, 함수 몸체에서 계산된 마지막 값이 자동으로 반환된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;etc&#34;&gt;etc&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;지역변수와 지역함수를 선언하려면 각각 &lt;code&gt;let&lt;/code&gt;과 &lt;code&gt;flet&lt;/code&gt;명령을 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;labels&lt;/code&gt;함수는 &lt;code&gt;flet&lt;/code&gt;과 비슷하나 함수 자신을 호출할 수 있게 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;referenes&#34;&gt;Referenes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yes24.com/24/goods/5968810?scode=032&amp;amp;OzSrank=8&#34;&gt;만들면서 배우는 리스프 프로그래밍 : Land of LISP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>